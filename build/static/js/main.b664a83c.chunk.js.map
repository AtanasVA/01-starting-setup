{"version":3,"sources":["components/UI/Card.tsx","components/Expenses/ExpenseFilter.tsx","components/Expenses/ExpenseDate.tsx","components/Expenses/ExpenseItem.tsx","components/Expenses/ExpenseList.tsx","components/Chart/ChartBar.tsx","components/Chart/Chart.tsx","components/Expenses/ExpensesChart.tsx","components/Expenses/Expenses.tsx","components/Expenses/NewExpense/ExpenseForm.tsx","components/Expenses/NewExpense/NewExpense.tsx","App.tsx","index.tsx"],"names":["Card","props","classes","className","children","ExpenseFilter","showFilteredByYear","selectedYear","onChange","target","value","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpenseList","expenseYears","length","map","id","ChartBar","fillAmount","maxValue","Math","round","style","height","label","Chart","numValues","dataValue","expense","totalMax","max","ExpensesChart","expensesData","getMonth","Expenses","useState","filteredYear","setFilteredYear","item","filter","toString","selYear","ExpenseForm","onNewExpense","onHide","titleField","updateTitleField","amountField","updateAmountField","dateField","updateDateField","onSubmit","event","preventDefault","inputExpense","Date","type","min","step","onClick","NewExpense","onNewExpenseRender","displayExpenseForm","updateDisplayExpenseForm","expenseObj","newExpense","random","DUMMY_DATA","App","expenses","setExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b664a83c.chunk.js","sourcesContent":["import \"./Card.css\";\ntype classProps = {\n  className: string;\n  children: JSX.Element[];\n};\nconst Card: React.FC<classProps> = (props) => {\n  const classes = \"card \" + props.className;\n  return <div className={classes}>{props.children}</div>;\n};\n\nexport default Card;\n","import React from \"react\";\nimport \"./ExpenseFilter.css\";\n\nconst ExpenseFilter = ({\n  showFilteredByYear,\n  selectedYear,\n}: {\n  showFilteredByYear: (arg: string) => void;\n  selectedYear: string;\n}) => {\n  const onFilterChange = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedYear = target.value;\n    showFilteredByYear(selectedYear);\n  };\n  return (\n    <div className=\"expense-filter\">\n      <div className=\"expense-filter__control\">\n        <label>Filter by year</label>\n        <select onChange={onFilterChange} value={selectedYear}>\n          <option value=\"2019\">2019</option>\n          <option value=\"2020\">2020</option>\n          <option value=\"2021\">2021</option>\n          <option value=\"2022\">2022</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpenseFilter;\n","import \"./ExpenseDate.css\";\n\nfunction ExpenseDate(props: { date: Date }) {\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n  const year = props.date.getFullYear();\n\n  return (\n    <div className=\"expense-date\">\n      <div className=\"expense-date__month\">{month}</div>\n      <div className=\"expense-date__day\">{day}</div>\n      <div className=\"expense-date__year\">{year}</div>\n    </div>\n  );\n}\n\nexport default ExpenseDate;\n","import React from \"react\";\nimport \"./ExpenseItem.css\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\";\nimport { expenseData } from \"../../App\";\n\nfunction ExpenseItem(props: expenseData) {\n  return (\n    <Card className=\"expense-item\">\n      <ExpenseDate date={props.date} />\n      <div className=\"expense-item__description\">\n        <h2>{props.title}</h2>\n        <div className=\"expense-item__price\">${props.amount}</div>\n      </div>\n    </Card>\n  );\n}\n\nexport default ExpenseItem;\n","import React from \"react\";\nimport \"./ExpenseList.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport { expenseData } from \"../../App\";\n\nconst ExpenseList = (props: { expenseYears: expenseData[] }) => {\n  if (props.expenseYears.length === 0) {\n    return <h2 className=\"expenses-list__fallback\">No expenses found</h2>;\n  }\n  return (\n    <ul className=\"expenses-list\">\n      {props.expenseYears.map(({ title, amount, date, id }) => (\n        <ExpenseItem key={id} title={title} amount={amount} date={date} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ExpenseList;\n","import React from \"react\";\nimport \"./ChartBar.css\";\n\ntype chartFields = {\n  label: string;\n  maxValue: number;\n  value: number;\n};\n\nconst ChartBar = (props: chartFields) => {\n  let fillAmount = \"0%\";\n  if (props.maxValue > 0) {\n    fillAmount = Math.round((props.value / props.maxValue) * 100) + \"%\";\n  }\n\n  return (\n    <div className=\"chart-bar\">\n      <div className=\"chart-bar__inner\">\n        <div className=\"chart-bar__fill\" style={{ height: fillAmount }}></div>\n      </div>\n      <div className=\"chart-bar__label\">{props.label}</div>\n    </div>\n  );\n};\n\nexport default ChartBar;\n","import React from \"react\";\nimport \"./Chart.css\";\nimport ChartBar from \"./ChartBar\";\n\ntype labelFields = {\n  label: string;\n  value: number;\n};\n\nconst Chart = (props: { dataValue: labelFields[] }) => {\n  const numValues = props.dataValue.map(\n    (expense: labelFields) => expense.value\n  );\n  const totalMax = Math.max(...numValues);\n  return (\n    <div className=\"chart\">\n      {props.dataValue.map((dataValue: labelFields) => {\n        return (\n          <ChartBar\n            key={dataValue.label}\n            label={dataValue.label}\n            value={dataValue.value}\n            maxValue={totalMax}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport { expenseData } from \"../../App\";\nimport Chart from \"../Chart/Chart\";\n\nconst ExpensesChart = (props: { expensesData: expenseData[] }) => {\n  const expensesData = [\n    { label: \"Jan\", value: 0 },\n    { label: \"Feb\", value: 0 },\n    { label: \"Mar\", value: 0 },\n    { label: \"Apr\", value: 0 },\n    { label: \"May\", value: 0 },\n    { label: \"Jun\", value: 0 },\n    { label: \"Jul\", value: 0 },\n    { label: \"Aug\", value: 0 },\n    { label: \"Sep\", value: 0 },\n    { label: \"Oct\", value: 0 },\n    { label: \"Nov\", value: 0 },\n    { label: \"Dec\", value: 0 },\n  ];\n\n  for (const expense of props.expensesData) {\n    const expenseMonth = expense.date.getMonth();\n    expensesData[expenseMonth].value += expense.amount;\n  }\n  return (\n    <div>\n      <Chart dataValue={expensesData} />\n    </div>\n  );\n};\n\nexport default ExpensesChart;\n","import React, { useState } from \"react\";\nimport \"./Expenses.css\";\nimport Card from \"../UI/Card\";\nimport ExpenseFilter from \"./ExpenseFilter\";\nimport ExpenseList from \"./ExpenseList\";\nimport ExpensesChart from \"./ExpensesChart\";\nimport { expenseData } from \"../../App\";\n\nfunction Expenses(props: { item: expenseData[] }) {\n  const [filteredYear, setFilteredYear] = useState<string>(\"2022\");\n\n  const showFilteredByYear = (selYear: string) => {\n    setFilteredYear(selYear);\n  };\n\n  const expenseYears = props.item.filter((expense: expenseData) => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n\n  return (\n    <li>\n      <Card className=\"expenses\">\n        <ExpenseFilter\n          selectedYear={filteredYear}\n          showFilteredByYear={showFilteredByYear}\n        />\n        <ExpensesChart expensesData={expenseYears} />\n        <ExpenseList expenseYears={expenseYears} />\n      </Card>\n    </li>\n  );\n}\n\nexport default Expenses;\n","import React, { ChangeEvent, FormEvent, useState } from \"react\";\nimport { expenseData } from \"../../../App\";\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = ({\n  onNewExpense,\n  onHide,\n}: {\n  onNewExpense: (arg: expenseData) => void;\n  onHide: () => void;\n}) => {\n  const [titleField, updateTitleField] = useState<string>(\"\");\n  const [amountField, updateAmountField] = useState<string>(\"\");\n  const [dateField, updateDateField] = useState<string>(\"\");\n\n  const getTitleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    updateTitleField(event.target.value);\n  };\n\n  const getAmountInput = (event: ChangeEvent<HTMLInputElement>) => {\n    updateAmountField(event.target.value);\n  };\n\n  const getDateInput = (event: ChangeEvent<HTMLInputElement>) => {\n    updateDateField(event.target.value);\n  };\n\n  const sumbitHandler = (event: FormEvent) => {\n    event.preventDefault();\n    const inputExpense = {\n      title: titleField,\n      amount: amountField as unknown as number,\n      date: new Date(dateField),\n    };\n\n    onNewExpense(inputExpense);\n    updateTitleField(\"\");\n    updateAmountField(\"\");\n    updateDateField(\"\");\n    onHide();\n  };\n\n  return (\n    <form onSubmit={sumbitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" value={titleField} onChange={getTitleInput} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            value={amountField}\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={getAmountInput}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            value={dateField}\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            onChange={getDateInput}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Submit Expense</button>\n        <button onClick={onHide}>Hide</button>\n      </div>\n    </form>\n  );\n};\nexport default ExpenseForm;\n","import React, { useState } from \"react\";\nimport { expenseData } from \"../../../App\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport \"./NewExpense.css\";\n\nconst NewExpense = ({\n  onNewExpenseRender,\n}: {\n  onNewExpenseRender: (arg: expenseData) => void;\n}) => {\n  const [displayExpenseForm, updateDisplayExpenseForm] =\n    useState<boolean>(false);\n  const onNewExpense = (expenseObj: expenseData) => {\n    const newExpense = {\n      ...expenseObj,\n      id: Math.random().toString(),\n    };\n    onNewExpenseRender(newExpense);\n  };\n\n  const onClick = () => {\n    displayExpenseForm\n      ? updateDisplayExpenseForm(false)\n      : updateDisplayExpenseForm(true);\n  };\n\n  return (\n    <div className=\"new-expense\">\n      {!displayExpenseForm && (\n        <button onClick={onClick}>Add New Expense</button>\n      )}\n      {displayExpenseForm && (\n        <ExpenseForm onNewExpense={onNewExpense} onHide={onClick} />\n      )}\n    </div>\n  );\n};\n\nexport default NewExpense;\n","import React, { useState } from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/Expenses/NewExpense/NewExpense\";\n\nexport type expenseData = {\n  id?: string;\n  title: string;\n  amount: number;\n  date: Date;\n};\n\nconst DUMMY_DATA = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n  {\n    id: \"e5\",\n    title: \"New TV\",\n    amount: 1500,\n    date: new Date(2021, 8, 2),\n  },\n];\nfunction App() {\n  const [expenses, setExpenses] = useState<expenseData[]>(DUMMY_DATA);\n\n  const onNewExpenseRender = (newExpense: expenseData) => {\n    setExpenses((expense) => {\n      return [newExpense, ...expense];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onNewExpenseRender={onNewExpenseRender} />\n      <Expenses item={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\nroot.render(<App />);\n"],"sourceRoot":""}